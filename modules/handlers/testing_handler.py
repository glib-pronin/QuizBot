from ..settings import  active_tests, bot, dispatcher
from ..filter import StartTest, TestAnswer, NextQuestion, CompleteTest, EnterAnswer
from ..utils import load_file, add_student_result, show_answered_student, get_answers_kb, get_admin_kb, clear_state_and_messaages
from ..permission import isAdmin
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.utils.keyboard import InlineKeyboardBuilder

router_testing = Router()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É
@router_testing.callback_query(StartTest.filter())
async def start_test_handler(callback: CallbackQuery, callback_data: StartTest):
    if not callback_data.code in active_tests: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–µ—Å—Ç –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
        await callback.answer('–¶–µ–π —Ç–µ—Å—Ç –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å –Ω–æ–≤–∏–π!', show_alert=True)
        return
    if not active_tests[callback_data.code]['connected_students']: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—ñ–¥'—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Ç–µ—Å—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∏
        await callback.answer('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç –±–µ–∑ –¥–æ—î–¥–Ω–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤!', show_alert=True)
        return
    if isAdmin(callback):
        data = load_file(f'{callback_data.test_id}.json')
        active_tests[callback_data.code]['current_question'] = 0
        active_tests[callback_data.code]['questions'] = data.get('questions')
        for student in active_tests[callback_data.code]['connected_students'].values():
            student['answered'] = False
            student['answers'] = {}
        await callback.answer(f'–¢–µ—Å—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ')
        await send_question(callback_data.code, active_tests[callback_data.code]['current_question'])
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
@router_testing.callback_query(TestAnswer.filter())
async def answer_handler(callback: CallbackQuery, callback_data: TestAnswer):
    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–±—Ä–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    code = callback_data.code
    index = callback_data.index # –Ü–Ω–¥–µ–∫—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    question_index = active_tests[code]['current_question']
    answer = active_tests[code]['questions'][question_index]['answers'][index]
    active_tests[code]['connected_students'][callback.from_user.id]['answers'][question_index] = answer
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞
    active_tests[code]['connected_students'][callback.from_user.id]['answered'] = True
    await callback.answer('–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞')
    # –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await bot.edit_message_text(
        chat_id=callback.from_user.id, message_id=active_tests[code]['connected_students'][callback.from_user.id]['message_id'], 
        text=f'{question_index+1}) {active_tests[code]['questions'][question_index]['question']}', 
        reply_markup=await get_answers_kb(answers=active_tests[code]['questions'][question_index]['answers'], selected_answer=callback_data.letter))
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞, —â–æ —Å—Ç—É–¥–µ–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤
    await show_answered_student(code, question_index)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç—É - –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ —Ç–∞–∫–∞ –¥—ñ—è –Ω–µ –º–æ–∂–ª–∏–≤–∞
@router_testing.callback_query(F.data == 'double_answer')
async def double_answer_handler(callback: CallbackQuery):
    await callback.answer("–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–º—ñ–Ω–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞!", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
@router_testing.callback_query(NextQuestion.filter())
async def next_question_handler(callback: CallbackQuery, callback_data: NextQuestion):
    if isAdmin(callback):
        code = callback_data.code
        for student_id, student in active_tests[code]['connected_students'].items():
            student['answered'] = False
            await clear_state_and_messaages(student_id, student)
        active_tests[code]['current_question'] += 1
        await callback.answer(f'–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è')
        await send_question(code=code, question_index=active_tests[code]['current_question'])
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è state answering
@router_testing.message(EnterAnswer.answering)
async def entering_answer_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    code = data.get('code')
    question_index = active_tests[code]['current_question']
    active_tests[code]['connected_students'][message.from_user.id]['answers'][question_index] = message.text
    await state.set_state(EnterAnswer.ready)
    active_tests[code]['connected_students'][message.from_user.id]['answered'] = True
    msg = await message.answer('–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞. –ß–µ–∫–∞–π—Ç–µ –¥—ñ–π –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    active_tests[code]['connected_students'][message.from_user.id]['msg_ids_to_delete'] = [msg.message_id, message.message_id]
    await show_answered_student(code, question_index)

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É
async def send_question(code: str, question_index: int):
    question_data = active_tests[code]['questions'][question_index]
    question = question_data['question']
    answers = question_data.get('answers')
    if not answers: # –Ø–∫—â–æ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –≤–≤–µ–¥–µ–Ω–Ω—è—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        student_kb = None
        for student_id in active_tests[code]['connected_students']:
            context = FSMContext(storage=dispatcher.storage, key=StorageKey(bot_id=bot.id, chat_id=student_id, user_id=student_id))
            await context.set_state(EnterAnswer.answering)
            await context.update_data(code=code)
    else:
        student_kb = InlineKeyboardBuilder()
        ind = 0
        for answer in question_data['answers']:
            student_kb.button(text=answer, callback_data=TestAnswer(code=code, index=ind, letter=answer[:1]).pack())
            ind += 1
        student_kb = student_kb.adjust(1).as_markup()
    students_names = [student['name'] for student in active_tests[code]['connected_students'].values()]
    admin_text = f'{question_index+1}) {question}\n‚òëÔ∏è–í—ñ–¥–ø–æ–≤—ñ–ª–∏:\n\nü§î–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏:\n{'\n'.join(students_names)}'
    # –í–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø–µ—Ä—à–µ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–π–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
    if question_index == 0:
        for id, student in active_tests[code]['connected_students'].items(): 
            msg = await bot.send_message(chat_id=id, text=f'{question_index+1}) {question}', reply_markup=student_kb)
            student['message_id'] = msg.message_id
        admin_msg = await bot.send_message(chat_id=active_tests[code]['admin_id'], text=admin_text, reply_markup=await get_admin_kb(code=code, question_index=question_index))
        active_tests[code]['admin_msg'] = admin_msg.message_id
        return
    # –í–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ —î –ø–µ—Ä—à–∏–º
    for id, student in active_tests[code]['connected_students'].items():
        await bot.edit_message_text(chat_id=id, message_id=student['message_id'], text=f'{question_index+1}) {question}', reply_markup=student_kb)
    await bot.edit_message_text(
        chat_id=active_tests[code]['admin_id'], message_id=active_tests[code]['admin_msg'], text=admin_text,
        reply_markup=await get_admin_kb(code=code, question_index=question_index)
        )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç
@router_testing.callback_query(CompleteTest.filter())
async def complete_test_handler(callback: CallbackQuery, callback_data: CompleteTest):
    if isAdmin(callback):
        code = callback_data.code
        await finish_test(code)
    else: 
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /stop
@router_testing.message(Command('stop'))
async def stop_tests_handler(message: Message):
    if isAdmin(message):
        codes = [code for code in active_tests if active_tests[code]['admin_id']==message.from_user.id]
        if len(codes) == 0:
            await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–µ—Å—Ç—ñ–≤!')
            return
        for code in codes:
           await finish_test(code, forced=True)
    else: 
        await message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç–µ—Å—Ç—É (—Ç–∞–∫–æ–∂ –≤—Ä–∞—Ö–æ–≤—É—î –≤–∞—Ä—ñ–∞–Ω—Ç –ø–µ—Ä–µ–¥—á–∞—Å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è)
async def finish_test(code: str, forced: bool = False):
    questions = active_tests[code].get('questions')
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è —Ç–µ—Å—Ç –∑ —Ü–∏–º –∫–æ–¥–æ–º
    if not questions:
        await bot.send_message(
            chat_id=active_tests[code]['admin_id'], 
            text=f"‚ùóÔ∏è –¢–µ—Å—Ç —ñ–∑ –∫–æ–¥–æ–º <b>{code}</b> –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ ‚Äî –≤—ñ–Ω —â–µ –Ω–µ —Ä–æ–∑–ø–æ—á–∞–≤—Å—è.", parse_mode='HTML')
        for id in active_tests[code]['connected_students']:
            await bot.send_message(chat_id=id, text=f"‚ùóÔ∏è –¢–µ—Å—Ç '{active_tests[code]['test']}' –±—É–ª–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ñ–Ω —â–µ –Ω–µ –≤—Å—Ç–∏–≥ —Ä–æ–∑–ø–æ—á–∞—Ç–∏—Å—è.")
        del active_tests[code]
        return
    students = active_tests[code]['connected_students']
    current_question = active_tests[code]['current_question']
    total_questions = len(questions)
    student_results = []
    student_results_percentage = []
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    for id, student in students.items():
        await clear_state_and_messaages(id, student)
        score = 0
        student_answers = student['answers']
        answers_analysis = []
        ind = 0
        for question in questions:
            if forced and ind > current_question:
                break 
            correct_answer = question['correct_answer']
            student_answer = student_answers.get(ind)
            # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è
            if student_answer == correct_answer:
                score += 1
                answers_analysis.append(f'\n{ind+1} {question['question']}\n‚úÖ {student_answer} - –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å')
            # –Ø–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            elif not student_answer:
                answers_analysis.append(f'\n{ind+1} {question['question']}\n‚ùå –í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}')
            # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞
            else:
                answers_analysis.append(f'\n{ind+1} {question['question']}\n‚ùå {student_answer} - –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}')
            ind += 1
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
        score_str = f'{score}/{current_question+1 if forced else total_questions}'
        await bot.edit_message_text(
            chat_id=id, message_id=student['message_id'], 
            text=f"{'‚ùóÔ∏è–¢–µ—Å—Ç –±—É–ª–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.' if forced else '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!üéâ'}\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score_str}\n\n–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n{'\n'.join(answers_analysis)}")
        student_results.append(f'üü¢ {student['name']} - {score_str}')
        student_results_percentage.append(round(score / (current_question if forced else total_questions) * 100, 2))
        # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∑–∞–Ω–µ—Å–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –≤ –±–¥
        await add_student_result(
            student_id=id, test_name=active_tests[code]['test'],
            student_name=student['name'], answers='\n'.join(answers_analysis), result=score_str,
            interrupted=forced)
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ 
    average_score = round(sum(student_results_percentage)/len(student_results_percentage), 2)
    await bot.edit_message_text(
        chat_id=active_tests[code]['admin_id'], message_id=active_tests[code]['admin_msg'],
        text=f"{'‚ùóÔ∏è–¢–µ—Å—Ç —ñ–∑ –∫–æ–¥–æ–º ' + code + ' –±—É–ª–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.'if forced else '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!üéâ'}\n\n–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: {average_score}%\n\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:\n{'\n'.join(student_results)}"
    )
    del active_tests[code] # –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ—Å—Ç

