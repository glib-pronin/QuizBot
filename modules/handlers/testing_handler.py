from ..settings import router_testing, active_tests, bot
from ..filter import StartTest, TestAnswer, NextQuestion, CompleteTest
from ..utils import load_file
from ..permission import isAdmin
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø–æ—á–∞—Ç–∫—É —Ç–µ—Å—Ç—É
@router_testing.callback_query(StartTest.filter())
async def start_test_handler(callback: CallbackQuery, callback_data: StartTest):
    if not callback_data.code in active_tests: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ç–µ—Å—Ç –∑ —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
        await callback.answer('–¶–µ–π —Ç–µ—Å—Ç –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ä–æ–∑–ø–æ—á–Ω—ñ—Ç—å –Ω–æ–≤–∏–π!', show_alert=True)
        return
    
    if not active_tests[callback_data.code]['connected_students']: # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—ñ–¥'—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Ç–µ—Å—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∏
        await callback.answer('–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç –±–µ–∑ –¥–æ—î–¥–Ω–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤!', show_alert=True)
        return
    
    if isAdmin(callback):
        data = load_file(f'{callback_data.test_id}.json')
        active_tests[callback_data.code]['current_question'] = 0
        active_tests[callback_data.code]['questions'] = data.get('questions')

        for student in active_tests[callback_data.code]['connected_students'].values():
            student['answered'] = False
            student['answers'] = {}
        await callback.answer(f'–¢–µ—Å—Ç —Ä–æ–∑–ø–æ—á–∞—Ç–æ')
        await send_question(callback_data.code, active_tests[callback_data.code]['current_question'])
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
@router_testing.callback_query(TestAnswer.filter())
async def answer_handler(callback: CallbackQuery, callback_data: TestAnswer):
    # –ó–∞–ø–∏—Å—É—î–º–æ –æ–±—Ä–∞–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    code = callback_data.code
    index = callback_data.index # –Ü–Ω–¥–µ–∫—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    question_index = active_tests[code]['current_question']
    answer = active_tests[code]['questions'][question_index]['answers'][index]
    active_tests[code]['connected_students'][callback.from_user.id]['answers'][question_index] = answer
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞
    active_tests[code]['connected_students'][callback.from_user.id]['answered'] = True
    await callback.answer('–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∏–π–Ω—è—Ç–∞')
    # –ë–ª–æ–∫—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await bot.edit_message_text(
        chat_id=callback.from_user.id, message_id=active_tests[code]['connected_students'][callback.from_user.id]['message_id'], 
        text=f'{question_index+1}) {active_tests[code]['questions'][question_index]['question']}', 
        reply_markup=await get_answers_kb(answers=active_tests[code]['questions'][question_index]['answers'], selected_answer=callback_data.letter))
    # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∞–¥–º—ñ–Ω–∞, —â–æ —Å—Ç—É–¥–µ–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–≤
    student_answered = [student['name'] for student in active_tests[code]['connected_students'].values() if student['answered']==True]
    student_not_answered = [student['name'] for student in active_tests[code]['connected_students'].values() if student['answered']==False]
    kb = await get_admin_kb(code, question_index)
    await bot.edit_message_text(
        chat_id=active_tests[code]['admin_id'], message_id=active_tests[code]['admin_msg'], 
        text=f'{question_index+1}) {active_tests[code]['questions'][question_index]['question']}\n‚òëÔ∏è–í—ñ–¥–ø–æ–≤—ñ–ª–∏:\n{'\n'.join(student_answered)}\n\nü§î–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏:\n{'\n'.join(student_not_answered)}',
        reply_markup=kb
        )

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω—É: –∑ –Ω–∞–ø–∏—Å–æ–º "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç", —è–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—î, —ñ–Ω–∞–∫—à–µ - "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"
async def get_admin_kb(code: str, question_index: int):
    if question_index + 1 < len(active_tests[code]['questions']):
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=NextQuestion(code=code).pack())]])
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç", callback_data=CompleteTest(code=code).pack())]])

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ 
async def get_answers_kb(answers: list, selected_answer: str):
    student_kb = InlineKeyboardBuilder()
    for answer in answers:
        student_kb.button(text=f'üü° {answer} - –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å' if answer.startswith(selected_answer) else answer, callback_data='double_answer')
    return student_kb.adjust(1).as_markup()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –≤–∞—Ä—ñ–∞–Ω—Ç—É - –ø–æ–≤—ñ–¥–æ–º–ª—è—î, —â–æ —Ç–∞–∫–∞ –¥—ñ—è –Ω–µ –º–æ–∂–ª–∏–≤–∞
@router_testing.callback_query(F.data == 'double_answer')
async def double_answer_handler(callback: CallbackQuery):
    await callback.answer("–í–∏ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–º—ñ–Ω–∏—Ç–∏ –Ω–µ –º–æ–∂–Ω–∞!", show_alert=True)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è
@router_testing.callback_query(NextQuestion.filter())
async def next_question_handler(callback: CallbackQuery, callback_data: NextQuestion):
    if isAdmin(callback):
        code = callback_data.code
        for student in active_tests[code]['connected_students'].values():
            student['answered'] = False
        active_tests[code]['current_question'] += 1
        await callback.answer(f'–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è')
        await send_question(code=code, question_index=active_tests[code]['current_question'])
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')

# –§—É–Ω–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É
async def send_question(code: str, question_index: int):
    question_data = active_tests[code]['questions'][question_index]
    question = question_data['question']
    student_kb = InlineKeyboardBuilder()
    ind = 0
    for answer in question_data['answers']:
        student_kb.button(text=answer, callback_data=TestAnswer(code=code, index=ind, letter=answer[:1]).pack())
        ind += 1
    students_names = [student['name'] for student in active_tests[code]['connected_students'].values()]
    admin_text = f'{question_index+1}) {question}\n‚òëÔ∏è–í—ñ–¥–ø–æ–≤—ñ–ª–∏:\n\nü§î–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏:\n{'\n'.join(students_names)}'
    # –í–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –ø–µ—Ä—à–µ (–ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –∞–π–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å)
    if question_index == 0:
        for id, student in active_tests[code]['connected_students'].items(): 
            msg = await bot.send_message(chat_id=id, text=f'{question_index+1}) {question}', reply_markup=student_kb.adjust(1).as_markup())
            student['message_id'] = msg.message_id
        admin_msg = await bot.send_message(chat_id=active_tests[code]['admin_id'], text=admin_text, reply_markup=await get_admin_kb(code=code, question_index=question_index))
        active_tests[code]['admin_msg'] = admin_msg.message_id
        return
    # –í–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ —î –ø–µ—Ä—à–∏–º
    for id, student in active_tests[code]['connected_students'].items():
        await bot.edit_message_text(chat_id=id, message_id=student['message_id'], text=f'{question_index+1}) {question}', reply_markup=student_kb.adjust(1).as_markup())
    await bot.edit_message_text(
        chat_id=active_tests[code]['admin_id'], message_id=active_tests[code]['admin_msg'], text=admin_text,
        reply_markup=await get_admin_kb(code=code, question_index=question_index)
        )

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç
@router_testing.callback_query(CompleteTest.filter())
async def complete_test_handler(callback: CallbackQuery, callback_data: CompleteTest):
    if isAdmin(callback):
        code = callback_data.code
        questions = active_tests[code]['questions']
        students = active_tests[code]['connected_students']
        total_questions = len(questions)
        student_results = []
        student_results_percentage = []
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        for id, student in students.items():
            score = 0
            student_answers = student['answers']
            answers_analysis = []
            ind = 0
            for question in questions:
                correct_answer = question['correct_answer']
                student_answer = student_answers.get(ind)
                # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑–±—ñ–≥–∞—é—Ç—å—Å—è
                if student_answer == correct_answer:
                    score += 1
                    answers_analysis.append(f'\n{ind+1} {question['question']}\n‚úÖ {student_answer} - –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å')
                # –Ø–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                elif not student_answer:
                    answers_analysis.append(f'\n{ind+1} {question['question']}\n‚ùå –í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ —Ü–µ –ø–∏—Ç–∞–Ω–Ω—è\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}')
                # –Ø–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞
                else:
                    answers_analysis.append(f'\n{ind+1} {question['question']}\n‚ùå {student_answer} - –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {correct_answer}')
                ind += 1
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ
            score_str = f'{score}/{total_questions}'
            await bot.edit_message_text(
                chat_id=id, message_id=student['message_id'], 
                text=f'–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!üéâ\n\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score_str}\n\n–ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:\n{'\n'.join(answers_analysis)}')
            student_results.append(f'üü¢ {student['name']} - {score_str}')
            student_results_percentage.append(round(score / total_questions * 100, 2))
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–∂–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ 
        average_score = round(sum(student_results_percentage)/len(student_results_percentage), 2)
        await bot.edit_message_text(
            chat_id=active_tests[code]['admin_id'], message_id=active_tests[code]['admin_msg'],
            text=f'–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!üéâ\n\n–°–µ—Ä–µ–¥–Ω—ñ–π –±–∞–ª: {average_score}%\n\n—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:\n{'\n'.join(student_results)}'
        )
        del active_tests[code] # –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ—Å—Ç
    else: 
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏')
