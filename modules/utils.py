from .settings import active_tests, bot, dispatcher
from .filter import StartTest, NextQuestion, CompleteTest
from .db import Session, Student, Result
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.base import StorageKey
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json, random

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–µ–≤–Ω–∏–π json-—Ñ–∞–π–ª
def load_file(filename: str):
    with open(f'quizzes/{filename}', 'r', encoding='utf-8') as f:
        return json.load(f)

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≥–µ–Ω–µ—Ä—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø—É–ø –¥–æ —Ç–µ—Å—Ç—É
def generate_unique_code():
    while True:
        code = str(random.randint(1000, 9999))
        if not code in active_tests:
            return code
        
# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–æ–Ω–µ–≥–æ —Ç–µ—Å—Ç—É, –∞ —Ç–∞–∫–∞–æ–∂ inline-–∫–Ω–æ–ø–∫—É
async def get_test_start_msg(code: str):
    test_code = active_tests.get(code)
    if test_code:
        title = test_code.get("test")
        test_id = test_code.get("test_id")
        students = test_code.get("connected_students")
        connected_students = '\n'.join([students[id]['name'] for id in students])
        test_start_msg = f'–¢–µ—Å—Ç: {title}\n\n–ö–æ–¥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {code}\n\n–°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:\n{connected_students}'
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–†–æ–∑–ø–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç', callback_data=StartTest(code=code, test_id=test_id).pack())]])
        return test_start_msg, kb

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –¥–æ –±–¥
async def add_student_result(student_id: int, test_name: str, student_name: str, answers: str, result: str, interrupted: bool ):
    with Session() as session:
        student = session.query(Student).filter_by(telegram_id = student_id).first()
        if not student:
            print(f"–ü–æ–º–∏–ª–∫–∞: –°—Ç—É–¥–µ–Ω—Ç–∞ –∑ telegram_id {student_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return
        result = Result(
            test_name = test_name, answers = answers, grade = result, 
            interrupted = interrupted, student_name = student_name, student = student)
        print(f'–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ id {student_id} –¥–æ–¥–∞–Ω–æ.')
        session.add(result)
        session.commit()

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–∫–∞–∑—É—î –∞–¥–º—ñ–Ω—É, —Ö—Ç–æ –≤–∂–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è, –∞ —Ö—Ç–æ –Ω—ñ
async def show_answered_student(code: int, question_index: int):
    student_answered = [student['name'] for student in active_tests[code]['connected_students'].values() if student['answered']==True]
    student_not_answered = [student['name'] for student in active_tests[code]['connected_students'].values() if student['answered']==False]
    kb = await get_admin_kb(code, question_index)
    await bot.edit_message_text(
        chat_id=active_tests[code]['admin_id'], message_id=active_tests[code]['admin_msg'], 
        text=f'{question_index+1}) {active_tests[code]['questions'][question_index]['question']}\n‚òëÔ∏è–í—ñ–¥–ø–æ–≤—ñ–ª–∏:\n{'\n'.join(student_answered)}\n\nü§î–ù–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏:\n{'\n'.join(student_not_answered)}',
        reply_markup=kb
        )

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º—ñ–Ω—É: –∑ –Ω–∞–ø–∏—Å–æ–º "–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç", —è–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—î, —ñ–Ω–∞–∫—à–µ - "–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"
async def get_admin_kb(code: str, question_index: int):
    if question_index + 1 < len(active_tests[code]['questions']):
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=NextQuestion(code=code).pack())]])
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç", callback_data=CompleteTest(code=code).pack())]])

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ 
async def get_answers_kb(answers: list, selected_answer: str):
    student_kb = InlineKeyboardBuilder()
    for answer in answers:
        student_kb.button(text=f'üü° {answer} - –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å' if answer.startswith(selected_answer) else answer, callback_data='double_answer')
    return student_kb.adjust(1).as_markup()

# –§—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –æ—á–∏—â–∞—î state, –∞ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä –≤—ñ–¥ –±–æ—Ç–∞)
async def clear_state_and_messaages(student_id: int, student: dict):
    context = FSMContext(storage=dispatcher.storage, key=StorageKey(bot_id=bot.id, chat_id=student_id, user_id=student_id))
    await context.clear()
    msg_ids_to_delete = student.get('msg_ids_to_delete')
    if msg_ids_to_delete:
        for msg_id in msg_ids_to_delete:
            await bot.delete_message(chat_id=student_id, message_id=msg_id)
        student['msg_ids_to_delete'].clear()

